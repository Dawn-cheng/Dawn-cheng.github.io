<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Dawn-cheng.github.io</id>
    <title>Dawn-cheng</title>
    <updated>2020-07-23T01:55:54.973Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Dawn-cheng.github.io"/>
    <link rel="self" href="https://Dawn-cheng.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Dawn-cheng.github.io/images/avatar.png</logo>
    <icon>https://Dawn-cheng.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Dawn-cheng</rights>
    <entry>
        <title type="html"><![CDATA[GO time包]]></title>
        <id>https://Dawn-cheng.github.io/2RM9DBOkg/</id>
        <link href="https://Dawn-cheng.github.io/2RM9DBOkg/">
        </link>
        <updated>2020-07-22T11:06:06.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABC联合索引生效问题]]></title>
        <id>https://Dawn-cheng.github.io/iYDeoWK2N/</id>
        <link href="https://Dawn-cheng.github.io/iYDeoWK2N/">
        </link>
        <updated>2020-07-21T03:15:07.000Z</updated>
        <summary type="html"><![CDATA[<p>对于复合索引：Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index （a,b,c）。 可以支持a | a,b| a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。</p>
]]></summary>
        <content type="html"><![CDATA[<p>对于复合索引：Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index （a,b,c）。 可以支持a | a,b| a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MyISAM以及InnoDB引擎默认排序方式]]></title>
        <id>https://Dawn-cheng.github.io/Z_ENFNWmH/</id>
        <link href="https://Dawn-cheng.github.io/Z_ENFNWmH/">
        </link>
        <updated>2020-07-21T01:57:32.000Z</updated>
        <summary type="html"><![CDATA[<p>今天在review代码查看SQL语句时突然对没有指定排序方式的SQL语句返回怎样的排序结构感兴趣！在某些场景中返回结果中的元素到底是按照什么顺序以什么字段排序的将直接影响到整个业务是否正确。例如myBatis中语句如下:</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天在review代码查看SQL语句时突然对没有指定排序方式的SQL语句返回怎样的排序结构感兴趣！在某些场景中返回结果中的元素到底是按照什么顺序以什么字段排序的将直接影响到整个业务是否正确。例如myBatis中语句如下:</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysql中的聚集索引、非聚集索引、聚簇索引、稀疏索引、稠密索引]]></title>
        <id>https://Dawn-cheng.github.io/jvx7Ng7mp/</id>
        <link href="https://Dawn-cheng.github.io/jvx7Ng7mp/">
        </link>
        <updated>2020-07-16T11:24:57.000Z</updated>
        <summary type="html"><![CDATA[<p>首先介绍这些索引的概念：<br>
1、聚集索引</p>
<p>聚集索引：指索引项的排序方式和表中数据记录排序方式一致的索引</p>
]]></summary>
        <content type="html"><![CDATA[<p>首先介绍这些索引的概念：<br>
1、聚集索引</p>
<p>聚集索引：指索引项的排序方式和表中数据记录排序方式一致的索引</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[邀请码的设计]]></title>
        <id>https://Dawn-cheng.github.io/6ZVP7IE6V/</id>
        <link href="https://Dawn-cheng.github.io/6ZVP7IE6V/">
        </link>
        <updated>2020-07-16T06:06:48.000Z</updated>
        <summary type="html"><![CDATA[<p>公司近期要做淘客项目，需要给每个会员生成一串唯一性的邀请码，在网上在了很多资料，最后找到一个自认为不错的设计，再次分享一下</p>
]]></summary>
        <content type="html"><![CDATA[<p>公司近期要做淘客项目，需要给每个会员生成一串唯一性的邀请码，在网上在了很多资料，最后找到一个自认为不错的设计，再次分享一下</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uni-app webview组件，页面铺面全屏问题]]></title>
        <id>https://Dawn-cheng.github.io/E4ZClyFIL/</id>
        <link href="https://Dawn-cheng.github.io/E4ZClyFIL/">
        </link>
        <updated>2020-07-15T09:57:02.000Z</updated>
        <summary type="html"><![CDATA[<p>web-view 是一个 web 浏览器组件，可以用来承载网页的容器，会自动铺满整个页面。</p>
<p>但是web-view铺满全屏  1.状态栏遮挡页面  2.没有区别app和h5页面</p>
]]></summary>
        <content type="html"><![CDATA[<p>web-view 是一个 web 浏览器组件，可以用来承载网页的容器，会自动铺满整个页面。</p>
<p>但是web-view铺满全屏  1.状态栏遮挡页面  2.没有区别app和h5页面</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[缓存穿透、缓存击穿、缓存雪崩区别和解决方案]]></title>
        <id>https://Dawn-cheng.github.io/4AtekLall/</id>
        <link href="https://Dawn-cheng.github.io/4AtekLall/">
        </link>
        <updated>2020-07-15T09:53:15.000Z</updated>
        <summary type="html"><![CDATA[<p>一、缓存处理流程</p>
<p>前台请求，后台先从缓存中取数据，取到直接返回结果，取不到时从数据库中取，数据库取到更新缓存，并返<br>
回结果，数据库也没取到，那直接返回空结果。</p>
]]></summary>
        <content type="html"><![CDATA[<p>一、缓存处理流程</p>
<p>前台请求，后台先从缓存中取数据，取到直接返回结果，取不到时从数据库中取，数据库取到更新缓存，并返<br>
回结果，数据库也没取到，那直接返回空结果。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS中的forEach,for in,for of和for的遍历优缺点及区别]]></title>
        <id>https://Dawn-cheng.github.io/nqk-kNdhD/</id>
        <link href="https://Dawn-cheng.github.io/nqk-kNdhD/">
        </link>
        <updated>2020-07-15T09:52:14.000Z</updated>
        <summary type="html"><![CDATA[<p>forEach：（可以三个参数，第一个是value，第二个是index，第三个是数组体）</p>
<p>缺点：不能同时遍历多个集合，在遍历的时候无法修改和删除集合数据，</p>
]]></summary>
        <content type="html"><![CDATA[<p>forEach：（可以三个参数，第一个是value，第二个是index，第三个是数组体）</p>
<p>缺点：不能同时遍历多个集合，在遍历的时候无法修改和删除集合数据，</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GO语言的值接受者和指针接受者实现接口的区别]]></title>
        <id>https://Dawn-cheng.github.io/3TRVjZYqd/</id>
        <link href="https://Dawn-cheng.github.io/3TRVjZYqd/">
        </link>
        <updated>2020-07-15T09:46:16.000Z</updated>
        <summary type="html"><![CDATA[<p>使用值接受者实现接口与使用指针接受者实现接口的区别</p>
<p>使用值接受者实现接口，结构体类型和结构体指针类型的变量都能存。<br>
指针接受者实现接口只能存结构体指针类型的变量</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用值接受者实现接口与使用指针接受者实现接口的区别</p>
<p>使用值接受者实现接口，结构体类型和结构体指针类型的变量都能存。<br>
指针接受者实现接口只能存结构体指针类型的变量</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[php echo 1+"9a" 为什么等于10]]></title>
        <id>https://Dawn-cheng.github.io/V4katkucI/</id>
        <link href="https://Dawn-cheng.github.io/V4katkucI/">
        </link>
        <updated>2020-07-15T09:45:46.000Z</updated>
    </entry>
</feed>